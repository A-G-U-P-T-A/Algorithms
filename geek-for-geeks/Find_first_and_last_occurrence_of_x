/*
https://practice.geeksforgeeks.org/problems/find-first-and-last-occurrence-of-x/0
Given a sorted array with possibly duplicate elements. The task is to find indexes of first and last occurrences of an element X in the given array.

Input:
The first line of input contains an integer T denoting the no of test cases. Then T test cases follow. Each test case contains an integer N denoting the size of the array. Then in the next line are N space separated values of the array. The last line of each test case contains an integer X.

Output:
For each test case in a new line print two integers separated by space denoting the first and last occurrence of the element X. If the element is not present in the array print -1.

Constraints:
1 <= T <= 100
1 <= N <= 1000
1 <= A[], X <= 1018

Example:
Input:
2
9
1 3 5 5 5 5 67 123 125
5
9
1 3 5 5 5 5 7 123 125
7

Output:
2 5
6 6

Explanation:
Testcase 1: Index of first occurrence of 5 is 2 and index of last occurrence of 5 is 5.
*/
#include <iostream>
using namespace std;
int binarySearch(int arr[], int l, int r, int x) { 
    if(r>=l){ 
        int mid=l+(r-l)/2; 
        if (arr[mid]==x)   
            return mid; 
        if (arr[mid]>x)  
            return binarySearch(arr, l, mid-1, x); 
        return binarySearch(arr, mid+1, r, x); 
    }
    return -1; 
}
int main() {
	int t,n,a[101],k;
	cin>>t;
	while(t--){
	    cin>>n;
	    for(int i=0;i<n;i++){
	        cin>>a[i];
	    }
	    cin>>k;
	    int p=binarySearch(a,0,n-1,k);
	    if(p==-1)
	        cout<<p<<endl;
	    else{
	        int f=p;
	        int b=p;
	        while(a[p]==a[f])
	            f--;
	        while(a[p]==a[b])
	            b++;
	        cout<<f+1<<" "<<b-1<<endl;
	    }
	}
	return 0;
}
